let dataTable;
let currentPage = 1;
let tableDataContainer;
let activeID;
let cacheMap = new Map();

//it takes an id, if that id exist on the cache then it puts them in the table
//otherwise it calls another function to take them from the server
export function putTableInfoFromCache(id) {
    const cachedData = cacheMap.get(id);
     activeID = id;
    if (cachedData) {
        if (Array.isArray(cachedData) && cachedData.length > 0) {
            tableDataContainer = [];
            tableDataContainer.push(...cachedData);
            dataTable.clear().rows.add(cachedData.map(Object.values)).draw();
        } else {
            console.warn("Empty or invalid cached data.");
        }
    } else {
        putTableInfoFromServer(id);
    }
}

//it puts takes info from the server like 20 object at a time. After it takes it add to
//the table 20 by 20
function putTableInfoFromServer(id) {
    const fetchData = (pageNumber) => {
        const faturaData = {
            vatnumber: id,
            page: pageNumber,
        };

        fetch("/tableinfo", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(faturaData),
        })
            .then((response) => response.json())
            .then((data) => {
                checkDataTable(data, false);

                if (pageNumber < data.last_page) {
                    fetchData(pageNumber + 1);
                } else {
                    cacheMap.set(id, tableDataContainer);
                }
            })
            .catch((error) => {
                checkDataTable("");
            });
    };

    fetchData(1);
}

//it takes the data and appear in the table. It take another argument to check if the data
//is coming from the filter then clear the table otherwise it mean is coming from
//the server so table need to save the old ones
export function checkDataTable(data, isFilter) {
    if (!dataTable) {
        dataTable = $("#example").DataTable();
        tableDataContainer = [];
    }
    if (data && data.data && data.data.length > 0) {
        if(isFilter){
            dataTable.clear().rows.add(data.data.map(Object.values)).draw();
        }else{
            tableDataContainer.push(...data.data);
            currentPage = data.current_page + 1;
            dataTable.rows.add(data.data.map(Object.values));
        setTimeout(() => {
            dataTable.draw();
        }, 10);
        }

    } else {
        dataTable.clear().draw();
        tableDataContainer = [];
        currentPage = 1;
    }
}

export function getTableDataContainer() {
    return tableDataContainer;
}

export function getID() {
    return activeID;
}










