let dataTable;
let currentPage = 1;
let activeID;
let cacheMap = new Map();
let tableDataContainer;

let ongoingRequests = new Map();

export function putTableInfoFromCache(id) {
    const cachedData = cacheMap.get(id);
    activeID = id;

    if (cachedData) {
        if (Array.isArray(cachedData) && cachedData.length > 0) {
            updateTableWithCachedData(cachedData);
        } else {
            console.warn("Empty or invalid cached data.");
        }
    } else {
        if (!ongoingRequests.has(id)) {
            ongoingRequests.set(id, true);
            putTableInfoFromServer(id);
        }
    }
}

function putTableInfoFromServer(id) {
    const fetchData = (pageNumber) => {
        const faturaData = {
            vatnumber: id,
            page: pageNumber,
        };

        fetch("/tableinfo", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(faturaData),
        })
        .then((response) => response.json())
        .then((data) => {
            if (pageNumber === 1) {
                checkDataTable(data, false);
            } else {
                updateTableSequentially(data);
            }

            if (pageNumber < data.last_page) {
                fetchData(pageNumber + 1);
            } else {
                cacheMap.set(id, tableDataContainer);
                ongoingRequests.delete(id); // Remove the request flag when fetching is complete
            }
        })
        .catch((error) => {
            ongoingRequests.delete(id); // Remove the request flag on error
            checkDataTable("");
        });
    };

    fetchData(1);
}

function updateTableSequentially(data) {
    if (data && data.data && data.data.length > 0) {
        tableDataContainer.push(...data.data);
        currentPage = data.current_page + 1;
        dataTable.rows.add(data.data.map(Object.values));
        setTimeout(() => {
            dataTable.draw();
        }, 10);
    }
}

function updateTableWithCachedData(cachedData) {
    dataTable.clear().rows.add(cachedData.map(Object.values)).draw();
}

export function checkDataTable(data, isFilter) {
    if (!dataTable) {
        dataTable = $("#example").DataTable();
        tableDataContainer = [];
    }

    if (data && data.data && data.data.length > 0) {
        if (isFilter) {
            dataTable.clear().rows.add(data.data.map(Object.values)).draw();
        } else {
            updateTableSequentially(data);
        }
    } else {
        dataTable.clear().draw();
        tableDataContainer = [];
        currentPage = 1;
    }
}

export function getTableDataContainer() {
    return tableDataContainer;
}

export function getID() {
    return activeID;
}

export function inicielizeTable(){
    if (!dataTable) {
        dataTable = $("#example").DataTable();
        tableDataContainer = [];
    }
}

